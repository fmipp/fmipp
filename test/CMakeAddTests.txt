# -------------------------------------------------------------------
# Copyright (c) 2013-2017, AIT Austrian Institute of Technology GmbH.
# All rights reserved. See file FMIPP_LICENSE for details.
# -------------------------------------------------------------------

# special function for adding test for FMI++
function( add_test_fmipp TEST_NAME )

   # special treatment for windows, set where to look for dlls when running the tests
   if ( WIN32 )

     # magic substitution. windows and cmake use the semicolon in a different way and fortunately windows uses the usual escape character backslash as path-separator
     if ( INCLUDE_SUNDIALS )
        STRING( REPLACE ";" "/\\;" PATH_FOR_TESTING "$ENV{PATH}${PATH_SEPARATOR}${SUNDIALS_LIBRARYDIR}" )
     else ()
        STRING( REPLACE ";" "/\\;" PATH_FOR_TESTING "$ENV{PATH}" )
     endif ()

     if ( MINGW )

         message( STATUS "Add test " ${TEST_NAME} " (MINGW)" )
         # append the directory with the built shared libraries
         set( PATH_FOR_TESTING "${CMAKE_BINARY_DIR}\\;${PATH_FOR_TESTING}" )
         add_test( fmipp_${TEST_NAME} test/${TEST_NAME} )
         # when adding tests, also add the set_test_properties for windows
         set_tests_properties( fmipp_${TEST_NAME} PROPERTIES ENVIRONMENT "PATH=${PATH_FOR_TESTING}" )
         set_tests_properties( fmipp_${TEST_NAME} PROPERTIES TIMEOUT 600 )

      elseif ( MSVC )

         # dll path depends on configuration (Debug, Release, etc.)
         foreach ( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )

            message( STATUS "Add test " ${TEST_NAME} " for configuration " ${OUTPUTCONFIG} )
            add_test( NAME fmipp_${TEST_NAME}_${OUTPUTCONFIG} CONFIGURATIONS ${OUTPUTCONFIG} COMMAND test/${TEST_NAME} )
            # append the directory with the built shared libraries
            set( PATH_FOR_TESTING_OUTPUTCONFIG "${CMAKE_BINARY_DIR}\\test\\${OUTPUTCONFIG}\\;${CMAKE_BINARY_DIR}\\${OUTPUTCONFIG}\\;${PATH_FOR_TESTING}" )
            # when adding tests, also add the set_test_properties for windows
            set_tests_properties( fmipp_${TEST_NAME}_${OUTPUTCONFIG} PROPERTIES ENVIRONMENT "PATH=${PATH_FOR_TESTING_OUTPUTCONFIG}" )
            set_tests_properties( fmipp_${TEST_NAME}_${OUTPUTCONFIG} PROPERTIES TIMEOUT 600 )

         endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
      endif()
		 
    elseif ( APPLE )

      message( STATUS "Add test ${TEST_NAME} (DARWIN)" )
      add_test( fmipp_${TEST_NAME} test/${TEST_NAME} )
      set_tests_properties( fmipp_${TEST_NAME} PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/test" )
      set_tests_properties( fmipp_${TEST_NAME} PROPERTIES TIMEOUT 600 )

    else ( UNIX )

      message( STATUS "Add test ${TEST_NAME} (LINUX)" )
      add_test( fmipp_${TEST_NAME} test/${TEST_NAME} )
      set_tests_properties( fmipp_${TEST_NAME} PROPERTIES ENVIRONMENT "PATH=${CMAKE_BINARY_DIR}/test" )
      set_tests_properties( fmipp_${TEST_NAME} PROPERTIES TIMEOUT 600 )

   endif ()

endfunction( add_test_fmipp )



if ( BUILD_SWIG )

   # function for adding java tests
   function( add_test_fmipp_java TEST_NAME )

      # magic substitution. windows and cmake use the semicolon in a different way and fortunately windows uses the usual escape character backslash as path-separator
      if ( INCLUDE_SUNDIALS )
         STRING( REPLACE ";" "/\\;" PATH_FOR_TESTING "$ENV{PATH}${PATH_SEPARATOR}${SUNDIALS_LIBRARYDIR}" )
      else ()
         STRING( REPLACE ";" "/\\;" PATH_FOR_TESTING "$ENV{PATH}" )
      endif ()

      if ( MSVC )

         # dll path depends on configuration (Debug, Release, etc.)
         foreach ( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )

            message( STATUS "Add test " ${TEST_NAME}_java " for configuration " ${OUTPUTCONFIG} )
            get_target_property( test_jar_file_path ${TEST_NAME}_java JAR_FILE )
            add_test( NAME fmipp_${TEST_NAME}_java_${OUTPUTCONFIG}
                      CONFIGURATIONS ${OUTPUTCONFIG}
                      COMMAND ${Java_JAVA_EXECUTABLE} -ea "-Djava.library.path=${FMIPPIM_WRAP_DIR}/${OUTPUTCONFIG}" -cp "${test_jar_file_path}${PATH_SEPARATOR}${FMIPPIM_JAR}" ${TEST_NAME} "${FMU_URI_PRE}" "${EPS_TIME}" )
            # append the directory with the built shared libraries
            set( PATH_FOR_TESTING_OUTPUTCONFIG "${CMAKE_BINARY_DIR}\\test\\${OUTPUTCONFIG}\\;${CMAKE_BINARY_DIR}\\${OUTPUTCONFIG}\\;${PATH_FOR_TESTING}" )
            # when adding tests, also add the set_test_properties for windows
            set_tests_properties( fmipp_${TEST_NAME}_java_${OUTPUTCONFIG} PROPERTIES ENVIRONMENT "PATH=${PATH_FOR_TESTING_OUTPUTCONFIG}" )
            set_tests_properties( fmipp_${TEST_NAME}_java_${OUTPUTCONFIG} PROPERTIES TIMEOUT 600 )

         endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

      elseif ( MINGW )

         message( STATUS "Add test ${TEST_NAME}_JAVA (MINGW)" )
         get_target_property( test_jar_file_path ${TEST_NAME}_java JAR_FILE )
         add_test( NAME fmipp_${TEST_NAME}_java COMMAND ${Java_JAVA_EXECUTABLE} -ea -Djava.library.path=${FMIPPIM_WRAP_DIR} -cp "${test_jar_file_path}${PATH_SEPARATOR}${FMIPPIM_JAR}" ${TEST_NAME} "${FMU_URI_PRE}" "${EPS_TIME}" )
         set_tests_properties( fmipp_${TEST_NAME}_java PROPERTIES ENVIRONMENT "PATH=${PATH_FOR_TESTING}${PATH_SEPARATOR}${SUNDIALS_LIBRARYDIR}\\;${CMAKE_BINARY_DIR}\\test" )
         set_tests_properties( fmipp_${TEST_NAME}_java PROPERTIES TIMEOUT 600 )

      else ()

         message( STATUS "Add test ${TEST_NAME}_JAVA" )
         get_target_property( test_jar_file_path ${TEST_NAME}_java JAR_FILE )
         add_test( NAME fmipp_${TEST_NAME}_java COMMAND ${Java_JAVA_EXECUTABLE} -ea -Djava.library.path=${FMIPPIM_WRAP_DIR} -cp "${test_jar_file_path}${PATH_SEPARATOR}${FMIPPIM_JAR}" ${TEST_NAME} "${FMU_URI_PRE}" "${EPS_TIME}" )
         set_tests_properties( fmipp_${TEST_NAME}_java PROPERTIES ENVIRONMENT "PATH=${PATH_FOR_TESTING}${PATH_SEPARATOR}${SUNDIALS_LIBRARYDIR}${PATH_SEPARATOR}${CMAKE_BINARY_DIR}/test" )
         set_tests_properties( fmipp_${TEST_NAME}_java PROPERTIES TIMEOUT 600 )
      endif ()

   endfunction( add_test_fmipp_java )


   # function for adding python tests
   function( add_test_fmipp_python TEST_NAME )

      # magic substitution. windows and cmake use the semicolon in a different way and fortunately windows uses the usual escape character backslash as path-separator
      if ( INCLUDE_SUNDIALS )
         STRING( REPLACE ";" "\\;" PATH_FOR_TESTING "$ENV{PATH}${PATH_SEPARATOR}${SUNDIALS_LIBRARYDIR}" )
      else ()
         STRING( REPLACE ";" "\\;" PATH_FOR_TESTING "$ENV{PATH}${PATH_SEPARATOR}" )
      endif ()

      if ( MSVC )

         FILE( TO_NATIVE_PATH ${CMAKE_BINARY_DIR} CMAKE_BIN_DIR_WIN )
         FILE( TO_NATIVE_PATH ${SUNDIALS_LIBRARYDIR} SUNDIALS_LIBRARYDIR_WIN )

         # dll path depends on configuration (Debug, Release, etc.)
         foreach ( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )

            message( STATUS "Add test " ${TEST_NAME}_python " for configuration " ${OUTPUTCONFIG} )
            add_test( NAME fmipp_${TEST_NAME}_python_${OUTPUTCONFIG}
                      CONFIGURATIONS ${OUTPUTCONFIG}
                      COMMAND ${PYTHON_EXECUTABLE} test/${TEST_NAME}.py "${FMU_URI_PRE}" "${EPS_TIME}" )
            # append the directory with the built shared libraries
            set( PATH_FOR_TESTING_OUTPUTCONFIG "${CMAKE_BIN_DIR_WIN}\\test\\${OUTPUTCONFIG}\\;${CMAKE_BIN_DIR_WIN}\\${OUTPUTCONFIG}\\;${PATH_FOR_TESTING}" )
            # when adding tests, also add the set_property for windows
            set_property( TEST fmipp_${TEST_NAME}_python_${OUTPUTCONFIG} PROPERTY ENVIRONMENT "PATH=${PATH_FOR_TESTING_OUTPUTCONFIG}" )
            set_property( TEST fmipp_${TEST_NAME}_python_${OUTPUTCONFIG} APPEND PROPERTY ENVIRONMENT "SUNDIALS_LIBRARYDIR=${SUNDIALS_LIBRARYDIR_WIN}" )
            set_property( TEST fmipp_${TEST_NAME}_python_${OUTPUTCONFIG} APPEND PROPERTY ENVIRONMENT "PYTHONPATH=${CMAKE_BIN_DIR_WIN}\\${OUTPUTCONFIG}" )
            set_tests_properties( fmipp_${TEST_NAME}_python_${OUTPUTCONFIG} PROPERTIES TIMEOUT 600 )

         endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

      elseif ( MINGW )

         message( STATUS "Add test ${TEST_NAME}_python (MINGW)" )
         add_test( NAME fmipp_${TEST_NAME}_python COMMAND ${PYTHON_EXECUTABLE} test/${TEST_NAME}.py "${FMU_URI_PRE}" "${EPS_TIME}")
         set_property( TEST fmipp_${TEST_NAME}_python APPEND PROPERTY ENVIRONMENT "PYTHONPATH=${CMAKE_BINARY_DIR}/import/swig" )
         set_property( TEST fmipp_${TEST_NAME}_python APPEND PROPERTY ENVIRONMENT "PATH=${PATH_FOR_TESTING}\\;${CMAKE_BINARY_DIR}\\;${CMAKE_BINARY_DIR}\\test" )
         set_tests_properties( fmipp_${TEST_NAME}_python PROPERTIES TIMEOUT 600 )

      else ()

         message( STATUS "Add test ${TEST_NAME}_python" )
         add_test( NAME fmipp_${TEST_NAME}_python COMMAND ${PYTHON_EXECUTABLE} test/${TEST_NAME}.py "${FMU_URI_PRE}" "${EPS_TIME}")
         set_property( TEST fmipp_${TEST_NAME}_python APPEND PROPERTY ENVIRONMENT "PYTHONPATH=${CMAKE_BINARY_DIR}/import/swig" )
         set_property( TEST fmipp_${TEST_NAME}_python APPEND PROPERTY ENVIRONMENT "PATH=${PATH_FOR_TESTING}${PATH_SEPARATOR}${CMAKE_BINARY_DIR}/test" )
         set_tests_properties( fmipp_${TEST_NAME}_python PROPERTIES TIMEOUT 600 )

      endif ()

   endfunction( add_test_fmipp_python )
   
   
endif ( BUILD_SWIG )
